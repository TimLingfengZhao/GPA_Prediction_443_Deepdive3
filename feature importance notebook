{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["Z1pZBqCaN53P"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"gkui-GpM2cRv"},"source":["# imports data processing from previous notebook"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-uKaf1utG87Y"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression, LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_percentage_error\n","original_df = pd.read_csv('https://raw.githubusercontent.com/wadefagen/datasets/master/gpa/uiuc-gpa-dataset.csv')\n","original_df.to_pickle(\"./uiuc-gpa-dataset.pkl\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1702241514080,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"LkqLVqybHSc4","outputId":"79843689-7aca-4e2e-f4aa-afafec39289f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Year    Term YearTerm Subject  Number                  Course Title  \\\n","0  2023  Spring  2023-sp     AAS     100  Intro Asian American Studies   \n","1  2023  Spring  2023-sp     AAS     100  Intro Asian American Studies   \n","2  2023  Spring  2023-sp     AAS     100  Intro Asian American Studies   \n","3  2023  Spring  2023-sp     AAS     200          U.S. Race and Empire   \n","4  2023  Spring  2023-sp     AAS     215  US Citizenship Comparatively   \n","\n","  Sched Type  A+   A  A-  ...  B-  C+  C  C-  D+  D  D-  F  W  \\\n","0        DIS   0  11   5  ...   0   0  0   0   0  0   0  1  0   \n","1        DIS   0  17   2  ...   1   0  0   0   0  0   0  0  1   \n","2        DIS   0  13   2  ...   2   0  0   1   0  0   0  1  0   \n","3        LCD   6  15   5  ...   0   0  0   0   0  1   0  1  0   \n","4        LCD  16  12   2  ...   1   0  0   0   0  0   0  0  0   \n","\n","   Primary Instructor  \n","0       Shin, Jeongsu  \n","1       Shin, Jeongsu  \n","2      Lee, Sabrina Y  \n","3      Sawada, Emilia  \n","4        Kwon, Soo Ah  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-0282e908-35ea-41bc-84d1-e9b4438a5e5b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Term</th>\n","      <th>YearTerm</th>\n","      <th>Subject</th>\n","      <th>Number</th>\n","      <th>Course Title</th>\n","      <th>Sched Type</th>\n","      <th>A+</th>\n","      <th>A</th>\n","      <th>A-</th>\n","      <th>...</th>\n","      <th>B-</th>\n","      <th>C+</th>\n","      <th>C</th>\n","      <th>C-</th>\n","      <th>D+</th>\n","      <th>D</th>\n","      <th>D-</th>\n","      <th>F</th>\n","      <th>W</th>\n","      <th>Primary Instructor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>100</td>\n","      <td>Intro Asian American Studies</td>\n","      <td>DIS</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Shin, Jeongsu</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>100</td>\n","      <td>Intro Asian American Studies</td>\n","      <td>DIS</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Shin, Jeongsu</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>100</td>\n","      <td>Intro Asian American Studies</td>\n","      <td>DIS</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Lee, Sabrina Y</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>200</td>\n","      <td>U.S. Race and Empire</td>\n","      <td>LCD</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Sawada, Emilia</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>215</td>\n","      <td>US Citizenship Comparatively</td>\n","      <td>LCD</td>\n","      <td>16</td>\n","      <td>12</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Kwon, Soo Ah</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0282e908-35ea-41bc-84d1-e9b4438a5e5b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0282e908-35ea-41bc-84d1-e9b4438a5e5b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0282e908-35ea-41bc-84d1-e9b4438a5e5b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-92dfe0fa-141c-4d65-877f-3f7904184112\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-92dfe0fa-141c-4d65-877f-3f7904184112')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-92dfe0fa-141c-4d65-877f-3f7904184112 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":2}],"source":["df = pd.read_pickle(\"./uiuc-gpa-dataset.pkl\")\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"Z1pZBqCaN53P"},"source":["### Nan Values"]},{"cell_type":"markdown","metadata":{"id":"MxroV3xhOCcb"},"source":["As we can see, only sched type and primary instructor contains missing values. We can simply drop the instructor column as we are not planed to use that column. For sched type, we decide not to dropna as there is a quite large number of rows missing that data. Instead, we fillna with \"Other\" and perform a one hot encoding to the sched type col."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1702241514081,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"N4henwKNLlv1","outputId":"626259fd-f4c6-4391-e516-b8467e725fc4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Year                      0\n","Term                      0\n","YearTerm                  0\n","Subject                   0\n","Number                    0\n","Course Title              0\n","Sched Type            10053\n","A+                        0\n","A                         0\n","A-                        0\n","B+                        0\n","B                         0\n","B-                        0\n","C+                        0\n","C                         0\n","C-                        0\n","D+                        0\n","D                         0\n","D-                        0\n","F                         0\n","W                         0\n","Primary Instructor      177\n","dtype: int64"]},"metadata":{},"execution_count":3}],"source":["df.isna().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1702241514081,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"iTbONwMhHU_D","outputId":"9448d6a2-76ea-4a1c-94ee-a91d94f9b0f5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Year    Term YearTerm Subject  Number              Course Title  \\\n","4266  2022    Fall  2022-fa    MATH     416   Abstract Linear Algebra   \n","6104  2022  Spring  2022-sp     FIN     300         Financial Markets   \n","6105  2022  Spring  2022-sp     FIN     300         Financial Markets   \n","6127  2022  Spring  2022-sp     FIN     500   Introduction to Finance   \n","7147  2022  Spring  2022-sp    SPAN     232  Spanish in the Community   \n","\n","     Sched Type  A+   A  A-  ...  B-  C+  C  C-  D+  D  D-  F  W  \\\n","4266        LCD   1   5   5  ...   2   0  0   2   0  1   0  1  2   \n","6104        LCD   4   9   9  ...   4   0  1   1   1  1   0  0  0   \n","6105        LCD   2   9   4  ...   4   3  2   2   1  0   1  0  0   \n","6127        LCD   2  18  14  ...   0   0  0   0   0  0   0  0  1   \n","7147        LCD  30  14   3  ...   3   2  0   0   0  1   0  2  0   \n","\n","      Primary Instructor  \n","4266                 NaN  \n","6104                 NaN  \n","6105                 NaN  \n","6127                 NaN  \n","7147                 NaN  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-31a3e246-3b29-4cca-96b0-4bee276531ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Term</th>\n","      <th>YearTerm</th>\n","      <th>Subject</th>\n","      <th>Number</th>\n","      <th>Course Title</th>\n","      <th>Sched Type</th>\n","      <th>A+</th>\n","      <th>A</th>\n","      <th>A-</th>\n","      <th>...</th>\n","      <th>B-</th>\n","      <th>C+</th>\n","      <th>C</th>\n","      <th>C-</th>\n","      <th>D+</th>\n","      <th>D</th>\n","      <th>D-</th>\n","      <th>F</th>\n","      <th>W</th>\n","      <th>Primary Instructor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4266</th>\n","      <td>2022</td>\n","      <td>Fall</td>\n","      <td>2022-fa</td>\n","      <td>MATH</td>\n","      <td>416</td>\n","      <td>Abstract Linear Algebra</td>\n","      <td>LCD</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6104</th>\n","      <td>2022</td>\n","      <td>Spring</td>\n","      <td>2022-sp</td>\n","      <td>FIN</td>\n","      <td>300</td>\n","      <td>Financial Markets</td>\n","      <td>LCD</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>9</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6105</th>\n","      <td>2022</td>\n","      <td>Spring</td>\n","      <td>2022-sp</td>\n","      <td>FIN</td>\n","      <td>300</td>\n","      <td>Financial Markets</td>\n","      <td>LCD</td>\n","      <td>2</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6127</th>\n","      <td>2022</td>\n","      <td>Spring</td>\n","      <td>2022-sp</td>\n","      <td>FIN</td>\n","      <td>500</td>\n","      <td>Introduction to Finance</td>\n","      <td>LCD</td>\n","      <td>2</td>\n","      <td>18</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7147</th>\n","      <td>2022</td>\n","      <td>Spring</td>\n","      <td>2022-sp</td>\n","      <td>SPAN</td>\n","      <td>232</td>\n","      <td>Spanish in the Community</td>\n","      <td>LCD</td>\n","      <td>30</td>\n","      <td>14</td>\n","      <td>3</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31a3e246-3b29-4cca-96b0-4bee276531ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-31a3e246-3b29-4cca-96b0-4bee276531ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-31a3e246-3b29-4cca-96b0-4bee276531ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a0aa46e9-245f-465e-b520-e05798e87b52\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0aa46e9-245f-465e-b520-e05798e87b52')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a0aa46e9-245f-465e-b520-e05798e87b52 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}],"source":["df[df.isna().any(axis=1)].head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1702241514081,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"fGHOWSl4Hdf3","outputId":"8d69b7f4-4909-4909-dda1-43d8178a7e4f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['DIS', 'LCD', 'LEC', 'ONL', 'OLC', 'OLB', 'LBD', 'LAB', 'ST',\n","       'CNF', 'INT', 'Onl', 'OD', 'SEM', 'PR', 'PKG', 'Q', nan, 'Int'],\n","      dtype=object)"]},"metadata":{},"execution_count":5}],"source":["df['Sched Type'].unique()"]},{"cell_type":"code","source":[],"metadata":{"id":"6UI3_f_RBQ07"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5lcLxQSBq36"},"source":["### Visualization 3"]},{"cell_type":"markdown","metadata":{"id":"YRJZe3eMtYLm"},"source":["So this visualization 3 is to examine the gpa disparity in students taking math courses in 2022. The second visualization visualize the average gpa of total year term. We calculate the mean value of math courses gpa and its stds."]},{"cell_type":"markdown","metadata":{"id":"SA_Uqe7zmMRG"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":2413,"status":"ok","timestamp":1702241516483,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"dyrPfHoztGm4","outputId":"2345f8c6-2ef1-4323-af02-5def495ef0ac"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-6-a6ed4a2daab8>:19: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_2022_df['Total GPA Points'] = sum(math_2022_df[grade] * gpa for grade, gpa in grade_to_gpa.items())\n","<ipython-input-6-a6ed4a2daab8>:21: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_2022_df['Total Students'] = math_2022_df[grade_columns].sum(axis=1)\n","<ipython-input-6-a6ed4a2daab8>:23: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_2022_df['Average GPA'] = math_2022_df['Total GPA Points'] / math_2022_df['Total Students']\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","\n","math_2022_df = df[(df['Subject'] == 'MATH') & (df['Year'] == 2022)]\n","\n","grade_to_gpa = {\n","    'A+': 4.0, 'A': 4.0, 'A-': 3.7,\n","    'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n","    'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n","    'D+': 1.3, 'D': 1.0, 'D-': 0.7,\n","    'F': 0.0\n","}\n","\n","\n","grade_columns = list(grade_to_gpa.keys())\n","\n","\n","math_2022_df['Total GPA Points'] = sum(math_2022_df[grade] * gpa for grade, gpa in grade_to_gpa.items())\n","\n","math_2022_df['Total Students'] = math_2022_df[grade_columns].sum(axis=1)\n","\n","math_2022_df['Average GPA'] = math_2022_df['Total GPA Points'] / math_2022_df['Total Students']\n","\n","average_gpa_per_course = math_2022_df.groupby('Number')['Average GPA'].mean()\n","\n","plt.figure(figsize=(14, 7))\n","average_gpa_per_course.plot(kind='bar', color='skyblue')\n","\n","plt.title('Average GPA for Math Courses in 2022')\n","plt.xlabel('Course Number')\n","plt.ylabel('Average GPA')\n","\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":966},"executionInfo":{"elapsed":2133,"status":"ok","timestamp":1702241518611,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"1et9E4twmG79","outputId":"81ca3fac-8538-4325-87e3-fc808a2a4f23"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-9281dae63845>:13: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_df['Total GPA Points'] = sum(math_df[grade] * gpa for grade, gpa in grade_to_gpa.items())\n","<ipython-input-7-9281dae63845>:15: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_df['Total Graded'] = math_df[list(grade_to_gpa.keys())].sum(axis=1)\n","<ipython-input-7-9281dae63845>:17: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_df['Average GPA'] = math_df['Total GPA Points'] / math_df['Total Graded']\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","\n","math_df = df[df['Subject'] == 'MATH']\n","\n","grade_to_gpa = {\n","    'A+': 4.0, 'A': 4.0, 'A-': 3.7,\n","    'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n","    'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n","    'D+': 1.3, 'D': 1.0, 'D-': 0.7,\n","    'F': 0.0\n","}\n","\n","math_df['Total GPA Points'] = sum(math_df[grade] * gpa for grade, gpa in grade_to_gpa.items())\n","\n","math_df['Total Graded'] = math_df[list(grade_to_gpa.keys())].sum(axis=1)\n","\n","math_df['Average GPA'] = math_df['Total GPA Points'] / math_df['Total Graded']\n","\n","average_gpa_by_course = math_df.groupby('Number')['Average GPA'].mean().reset_index()\n","\n","average_gpa_by_course = average_gpa_by_course.sort_values(by='Number')\n","\n","plt.figure(figsize=(14, 7))\n","sns.barplot(x='Number', y='Average GPA', data=average_gpa_by_course)\n","plt.title('Average GPA in MATH Courses')\n","plt.xticks(rotation=90)\n","plt.xlabel('MATH Course Number')\n","plt.ylabel('Average GPA')\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1702241518611,"user":{"displayName":"Yue Su","userId":"08973589852710761677"},"user_tz":360},"id":"KiUbruixsADD","outputId":"333cc81c-cc32-4f18-b6c5-b9635a2e4db8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Average GPA: 3.19\n","Standard Deviation of Average GPA: 0.39\n"]}],"source":["mean_gpa = average_gpa_by_course['Average GPA'].mean()\n","std_gpa = average_gpa_by_course['Average GPA'].std()\n","\n","print(f\"Mean Average GPA: {mean_gpa:.2f}\")\n","print(f\"Standard Deviation of Average GPA: {std_gpa:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"DN27aDsovIKL"},"source":["So the mean is 3.194280 and the deviance is 0.39, which also shows that math is a hard subject to study."]},{"cell_type":"code","source":["# import pandas as pd\n","# from sklearn.linear_model import LinearRegression\n","\n","# # Assuming 'df' is your DataFrame\n","\n","# # Filter for MATH subject\n","# math_df = df[df['Subject'] == 'MATH']\n","\n","# # Convert YearTerm to numerical\n","# def convert_yearterm(yearterm):\n","#     year, term = yearterm.split('-')\n","#     year = int(year) - 2010\n","#     term = 0 if term == 'sp' else 1\n","#     return 2 * year + term\n","\n","# math_df['YearTerm Numeric'] = math_df['YearTerm'].apply(convert_yearterm)\n","\n","# # Define the GPA mapping\n","# grade_to_gpa = {\n","#     'A+': 4.0, 'A': 4.0, 'A-': 3.7,\n","#     'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n","#     'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n","#     'D+': 1.3, 'D': 1.0, 'D-': 0.7,\n","#     'F': 0.0\n","# }\n","\n","# # Calculate the GPA for each row\n","# for grade, gpa in grade_to_gpa.items():\n","#     if grade in math_df.columns:\n","#         math_df[grade] = math_df[grade] * gpa\n","\n","# math_df['Total GPA Points'] = math_df[list(grade_to_gpa.keys())].sum(axis=1)\n","# math_df['Total Graded'] = math_df[list(grade_to_gpa.keys())].apply(lambda x: x > 0).sum(axis=1)\n","# math_df['Average GPA'] = (math_df['Total GPA Points'] / math_df['Total Graded']).clip(upper=4.0)\n","\n","# # Calculate the average GPA for each YearTerm\n","# average_gpa_by_yearterm = math_df.groupby('YearTerm Numeric')['Average GPA'].mean().reset_index()\n","\n","# # Linear Regression\n","# X = average_gpa_by_yearterm[['YearTerm Numeric']]\n","# y = average_gpa_by_yearterm['Average GPA']\n","\n","# model = LinearRegression()\n","# model.fit(X, y)\n","\n","# m = model.coef_[0]\n","# b = model.intercept_\n","\n","# print(f\"Slope (m): {m}\")\n","# print(f\"Intercept (b): {b}\")\n"],"metadata":{"id":"NT7XkHF_EDMy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"rn4cBx79qwGy","executionInfo":{"status":"ok","timestamp":1702241518611,"user_tz":360,"elapsed":6,"user":{"displayName":"Yue Su","userId":"08973589852710761677"}},"outputId":"b59def34-c4f8-43ff-e26f-be1411c5e5b0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Year    Term YearTerm Subject  Number                  Course Title  \\\n","0  2023  Spring  2023-sp     AAS     100  Intro Asian American Studies   \n","1  2023  Spring  2023-sp     AAS     100  Intro Asian American Studies   \n","2  2023  Spring  2023-sp     AAS     100  Intro Asian American Studies   \n","3  2023  Spring  2023-sp     AAS     200          U.S. Race and Empire   \n","4  2023  Spring  2023-sp     AAS     215  US Citizenship Comparatively   \n","\n","  Sched Type  A+   A  A-  ...  B-  C+  C  C-  D+  D  D-  F  W  \\\n","0        DIS   0  11   5  ...   0   0  0   0   0  0   0  1  0   \n","1        DIS   0  17   2  ...   1   0  0   0   0  0   0  0  1   \n","2        DIS   0  13   2  ...   2   0  0   1   0  0   0  1  0   \n","3        LCD   6  15   5  ...   0   0  0   0   0  1   0  1  0   \n","4        LCD  16  12   2  ...   1   0  0   0   0  0   0  0  0   \n","\n","   Primary Instructor  \n","0       Shin, Jeongsu  \n","1       Shin, Jeongsu  \n","2      Lee, Sabrina Y  \n","3      Sawada, Emilia  \n","4        Kwon, Soo Ah  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-d0523459-3500-4b4a-94af-b804398c9a51\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Term</th>\n","      <th>YearTerm</th>\n","      <th>Subject</th>\n","      <th>Number</th>\n","      <th>Course Title</th>\n","      <th>Sched Type</th>\n","      <th>A+</th>\n","      <th>A</th>\n","      <th>A-</th>\n","      <th>...</th>\n","      <th>B-</th>\n","      <th>C+</th>\n","      <th>C</th>\n","      <th>C-</th>\n","      <th>D+</th>\n","      <th>D</th>\n","      <th>D-</th>\n","      <th>F</th>\n","      <th>W</th>\n","      <th>Primary Instructor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>100</td>\n","      <td>Intro Asian American Studies</td>\n","      <td>DIS</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Shin, Jeongsu</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>100</td>\n","      <td>Intro Asian American Studies</td>\n","      <td>DIS</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Shin, Jeongsu</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>100</td>\n","      <td>Intro Asian American Studies</td>\n","      <td>DIS</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Lee, Sabrina Y</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>200</td>\n","      <td>U.S. Race and Empire</td>\n","      <td>LCD</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Sawada, Emilia</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023</td>\n","      <td>Spring</td>\n","      <td>2023-sp</td>\n","      <td>AAS</td>\n","      <td>215</td>\n","      <td>US Citizenship Comparatively</td>\n","      <td>LCD</td>\n","      <td>16</td>\n","      <td>12</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Kwon, Soo Ah</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0523459-3500-4b4a-94af-b804398c9a51')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d0523459-3500-4b4a-94af-b804398c9a51 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d0523459-3500-4b4a-94af-b804398c9a51');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-be5efb9b-12f2-49f4-a6b8-005801c70d08\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be5efb9b-12f2-49f4-a6b8-005801c70d08')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-be5efb9b-12f2-49f4-a6b8-005801c70d08 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# import pandas as pd\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.linear_model import LogisticRegression\n","# from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n","# from sklearn.compose import ColumnTransformer\n","# from sklearn.pipeline import Pipeline\n","# # !pip install shap\n","# import shap\n","\n","# math_df = df[df['Subject'] == 'MATH'].copy()\n","\n","# def convert_yearterm(yearterm):\n","#     year, term = yearterm.split('-')\n","#     year = int(year) - 2010\n","#     return year\n","\n","# math_df.loc[:, 'Year'] = math_df['YearTerm'].apply(convert_yearterm)\n","\n","# # grade_to_gpa = {\n","# #     'A+': 4.0, 'A': 4.0, 'A-': 3.7,\n","# #     'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n","# #     'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n","# #     'D+': 1.3, 'D': 1.0, 'D-': 0.7,\n","# #     'F': 0.0\n","# # }\n","\n","# for grade, gpa in grade_to_gpa.items():\n","#     if grade in math_df.columns:\n","#         math_df[grade] = math_df[grade] * gpa\n","\n","# # math_df['Total GPA Points'] = math_df[list(grade_to_gpa.keys())].sum(axis=1)\n","# # math_df['Total Graded'] = math_df[list(grade_to_gpa.keys())].apply(lambda x: x > 0).sum(axis=1)\n","# # math_df['Average GPA'] = (math_df['Total GPA Points'] / math_df['Total Graded']).clip(upper=4.0)\n","\n","# graded_columns = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']  # Adjust as per your DataFrame\n","# math_df['Total Graded'] = math_df[graded_columns].sum(axis=1)\n","# math_df['Percent A/A+'] = (math_df['A'] + math_df['A+']) / math_df['Total Graded']\n","\n","# threshold = 0.30\n","# math_df.loc[:, 'Is Easy'] = (math_df['Percent A/A+'] >= threshold).astype(int)\n","\n","# features = math_df[['Year', 'Number', 'Sched Type']]\n","# target = math_df['Is Easy']\n","\n","# categorical_features = ['Sched Type']\n","# numerical_features = ['Year', 'Number']\n","\n","# # Convert to float\n","# preprocessor = ColumnTransformer(\n","#     transformers=[\n","#         ('num', MinMaxScaler(), numerical_features),\n","#         ('cat', OneHotEncoder(), categorical_features)\n","#     ])\n","\n","# pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n","#                            ('classifier', LogisticRegression())])\n","\n","# X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n","\n","# pipeline.fit(X_train, y_train)\n","\n","# X_test_transformed = preprocessor.transform(X_test)\n","# explainer = shap.Explainer(pipeline.named_steps['classifier'], X_test_transformed)\n","# shap_values = explainer(X_test_transformed)\n","\n","# average_shap_values = np.abs(shap_values.values).mean(axis=0)\n","# feature_names = X_test.columns\n","# average_shap_values_dict = dict(zip(feature_names, average_shap_values))\n","\n","# average_shap_values_dict"],"metadata":{"id":"4UqkSk2S6i1F"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Feature Importance analysis"],"metadata":{"id":"xveEeva6Jk8L"}},{"cell_type":"code","source":["math_df = df[df['Subject'] == 'MATH']\n","\n","math_df['Percent A/A+'] = (math_df['A'] + math_df['A+']) / math_df.iloc[:, 8:21].sum(axis=1)\n","\n","threshold = 0.30\n","\n","math_df['Is Easy'] = (math_df['Percent A/A+'] >= threshold).astype(int)\n","print(math_df)\n","indices_to_drop = []\n","for index, row in math_df.iloc[1:].iterrows():\n","    year = row['Year']\n","    next_year = year + 1\n","    nnext_year = year + 2\n","    c_num = row['Number']\n","    drop = True\n","    for index_, row_ in math_df.iloc[1:].iterrows():\n","      if(row_['Number'] == c_num and row_['Year'] == next_year):\n","        math_df.loc[index,'Is Easy'] = row_['Is Easy']\n","        drop = False\n","      elif(row_['Number'] == c_num and row_['Year'] == nnext_year):\n","        math_df.loc[index,'Is Easy'] = row_['Is Easy']\n","        drop = False\n","    if(drop):\n","      indices_to_drop.append(index)\n","math_df = math_df.drop(indices_to_drop)\n","print(math_df)\n","\n","\n","'''\n","features = math_df.drop(['Term', 'YearTerm', 'Subject', 'Course Title',\n","                         'Primary Instructor', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C',\n","                         'C-', 'D+', 'D', 'D-', 'F', 'W', 'Percent A/A+', 'Is Easy'], axis=1)\n","features = math_df.drop(['Term', 'YearTerm', 'Subject', 'Course Title',\n","                         'Primary Instructor', 'Percent A/A+', 'Is Easy'], axis=1)\n","'''\n","features = math_df.drop(['Term', 'YearTerm', 'Subject', 'Course Title',\n","                         'Primary Instructor', 'Percent A/A+', 'Is Easy', 'Sched Type'], axis=1)\n","\n","\n","#features = pd.get_dummies(features)\n","\n","target = math_df['Is Easy']\n","\n","\n","X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(features, target, test_size=0.2, random_state=42)\n","\n","reg = LinearRegression().fit(X_train_1, y_train_1)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JXCkzBbQPpvv","executionInfo":{"status":"ok","timestamp":1702241917723,"user_tz":360,"elapsed":399117,"user":{"displayName":"Yue Su","userId":"08973589852710761677"}},"outputId":"c30acb8b-34ae-4946-bcf6-c5e21e60dad8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Year    Term YearTerm Subject  Number                  Course Title  \\\n","1545   2023  Spring  2023-sp    MATH     103          Theory of Arithmetic   \n","1546   2023  Spring  2023-sp    MATH     112                       Algebra   \n","1547   2023  Spring  2023-sp    MATH     115      Preparation for Calculus   \n","1548   2023  Spring  2023-sp    MATH     119             Ideas in Geometry   \n","1549   2023  Spring  2023-sp    MATH     124            Finite Mathematics   \n","...     ...     ...      ...     ...     ...                           ...   \n","69009  2010  Summer  2010-su    MATH     241                  Calculus III   \n","69010  2010  Summer  2010-su    MATH     285  Intro Differential Equations   \n","69011  2010  Summer  2010-su    MATH     415        Applied Linear Algebra   \n","69012  2010  Summer  2010-su    MATH     415        Applied Linear Algebra   \n","69013  2010  Summer  2010-su    MATH     446     Applied Complex Variables   \n","\n","      Sched Type  A+   A  A-  ...   C  C-  D+   D  D-   F  W  \\\n","1545         LEC   8  22   6  ...   2   0   2   0   0   1  1   \n","1546         LEC   4  10  11  ...   8   6   1   3   4   4  0   \n","1547         LEC   9  26   5  ...  35   2   3  12   3  19  2   \n","1548         LCD   4   5   3  ...   0   0   0   0   0   1  0   \n","1549         LCD   3   6   1  ...   1   0   0   0   1   3  0   \n","...          ...  ..  ..  ..  ...  ..  ..  ..  ..  ..  .. ..   \n","69009        LCD   1   2   3  ...   2   5   0   3   2   2  2   \n","69010        LCD   0   6   3  ...   1   3   2   2   1   0  0   \n","69011        LCD   6   4   1  ...   0   0   0   1   0   0  0   \n","69012        LCD   4   2   4  ...   3   1   1   0   1   1  0   \n","69013        LCD   7   6   3  ...   2   1   1   0   0   0  0   \n","\n","         Primary Instructor  Percent A/A+  Is Easy  \n","1545       Placzek, Laura E      0.638298        1  \n","1546        Le, Thanh Thi T      0.237288        0  \n","1547   Hoffmeister, April M      0.205882        0  \n","1548     Orelowitz, Gidon R      0.391304        1  \n","1549        Lense, Daniel P      0.428571        1  \n","...                     ...           ...      ...  \n","69009         To, Jin Hyung      0.130435        0  \n","69010  Stolarsky, Kenneth B      0.206897        0  \n","69011   Bergvelt, Maarten J      0.555556        1  \n","69012   Bergvelt, Maarten J      0.230769        0  \n","69013      Nikolaev, Igor G      0.722222        1  \n","\n","[2708 rows x 24 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-09a3fbede48a>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_df['Percent A/A+'] = (math_df['A'] + math_df['A+']) / math_df.iloc[:, 8:21].sum(axis=1)\n","<ipython-input-12-09a3fbede48a>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  math_df['Is Easy'] = (math_df['Percent A/A+'] >= threshold).astype(int)\n"]},{"output_type":"stream","name":"stdout","text":["       Year    Term YearTerm Subject  Number                  Course Title  \\\n","1545   2023  Spring  2023-sp    MATH     103          Theory of Arithmetic   \n","4208   2022    Fall  2022-fa    MATH     112                       Algebra   \n","4209   2022    Fall  2022-fa    MATH     112                       Algebra   \n","4210   2022    Fall  2022-fa    MATH     115      Preparation for Calculus   \n","4211   2022    Fall  2022-fa    MATH     115      Preparation for Calculus   \n","...     ...     ...      ...     ...     ...                           ...   \n","69009  2010  Summer  2010-su    MATH     241                  Calculus III   \n","69010  2010  Summer  2010-su    MATH     285  Intro Differential Equations   \n","69011  2010  Summer  2010-su    MATH     415        Applied Linear Algebra   \n","69012  2010  Summer  2010-su    MATH     415        Applied Linear Algebra   \n","69013  2010  Summer  2010-su    MATH     446     Applied Complex Variables   \n","\n","      Sched Type  A+   A  A-  ...   C  C-  D+   D  D-   F  W  \\\n","1545         LEC   8  22   6  ...   2   0   2   0   0   1  1   \n","4208         LEC  12  35  20  ...   3   8   7   2   2  10  1   \n","4209         LEC  16  47  32  ...   9   4   5   5   4  11  0   \n","4210         LEC  13  53   4  ...  23   2   3   7   2   5  1   \n","4211         LEC  18  41  11  ...  24   0   1  17   3   8  1   \n","...          ...  ..  ..  ..  ...  ..  ..  ..  ..  ..  .. ..   \n","69009        LCD   1   2   3  ...   2   5   0   3   2   2  2   \n","69010        LCD   0   6   3  ...   1   3   2   2   1   0  0   \n","69011        LCD   6   4   1  ...   0   0   0   1   0   0  0   \n","69012        LCD   4   2   4  ...   3   1   1   0   1   1  0   \n","69013        LCD   7   6   3  ...   2   1   1   0   0   0  0   \n","\n","         Primary Instructor  Percent A/A+  Is Easy  \n","1545       Placzek, Laura E      0.638298        1  \n","4208          Reddy, Alison      0.321918        0  \n","4209          Reddy, Alison      0.360000        0  \n","4210   Hoffmeister, April M      0.442953        0  \n","4211   Hoffmeister, April M      0.375796        0  \n","...                     ...           ...      ...  \n","69009         To, Jin Hyung      0.130435        1  \n","69010  Stolarsky, Kenneth B      0.206897        1  \n","69011   Bergvelt, Maarten J      0.555556        0  \n","69012   Bergvelt, Maarten J      0.230769        0  \n","69013      Nikolaev, Igor G      0.722222        1  \n","\n","[2544 rows x 24 columns]\n"]}]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","class Net(nn.Module):\n","    def __init__(self, inpu_dim):\n","        super(Net, self).__init__()\n","        self.fc1 = nn.Linear(input_dim, 240)\n","        self.fc2 = nn.Linear(240, 240)\n","        self.fc3 = nn.Linear(240, 240)\n","        self.fc4 = nn.Linear(240, 1)\n","\n","    def forward(self, x):\n","        x = torch.sigmoid(self.fc1(x))\n","        x = torch.sigmoid(self.fc2(x))\n","        x = torch.sigmoid(self.fc3(x))\n","        x = torch.sigmoid(self.fc4(x))\n","        return x.view(-1, 1)\n","    def _init_weights(self, module):\n","        if isinstance(module, nn.Linear):\n","            module.weight.data.normal_(mean=__mean, std=__std)   #initialized with normal distribution with mean = \"mean\" and std deviation = \"std\"\n","            if module.bias is not None:\n","                module.bias.data.zero_()\n","\n","#d = {'col1': [1, 2], 'col2': [3, 4]}\n","#df = pd.DataFrame(data=d)\n","\n","input_dim = X_train_1.shape[1]  #input_dim = 16\n","print('input_dim = ', input_dim)\n","model = Net(input_dim)\n","\n","\n","loss = nn.MSELoss()\n","learning_rate = 0.0001\n","optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n","\n","lossvalue_list = []\n","\n","X_train_1_tensor = torch.FloatTensor(X_train_1.values)\n","y_train_1_tensor = torch.FloatTensor(y_train_1.values)  #sample labels for training\n","\n","num_epochs = 1000\n","\n","\n","for epoch in range(num_epochs):\n","  # Forward pass\n","  output = model(X_train_1_tensor)\n","  #print('epoch =', epoch, 'output = ', output)\n","  lossvalue = loss(output, y_train_1_tensor)\n","  #print('epoch = ', epoch, ', loss value for model = ', lossvalue.item())\n","  lossvalue_list.append(lossvalue.item())\n","\n","\n","  # Backward pass and optimization\n","  optimizer.zero_grad()\n","\n","  lossvalue.backward()\n","\n","  optimizer.step()\n","\n","\n","X_test_1_tensor = torch.FloatTensor(X_test_1.values)\n","y_test_1_tensor = torch.FloatTensor(y_test_1.values)  #sample labels for testing\n","\n","print('train loss =', loss(model(X_train_1_tensor), y_train_1_tensor).item())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NuVJbcSp9RSG","executionInfo":{"status":"ok","timestamp":1702242017425,"user_tz":360,"elapsed":99706,"user":{"displayName":"Yue Su","userId":"08973589852710761677"}},"outputId":"f28d98d2-3783-401b-8a87-fd7d7fa70993"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["input_dim =  16\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([2035])) that is different to the input size (torch.Size([2035, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n"]},{"output_type":"stream","name":"stdout","text":["train loss = 0.16058874130249023\n"]}]},{"cell_type":"code","source":["from sklearn.base import BaseEstimator, ClassifierMixin\n","\n","class PyTorchClassifier(BaseEstimator, ClassifierMixin):\n","    def __init__(self, input_dim, learning_rate=0.0001, num_epochs=1000):\n","        self.input_dim = input_dim\n","        self.learning_rate = learning_rate\n","        self.num_epochs = num_epochs\n","        self.model = Net(input_dim)\n","        self.loss = nn.MSELoss()\n","        self.optimizer = optim.Adam(self.model.parameters(), lr=learning_rate)\n","\n","    def fit(self, X, y):\n","        X_tensor = torch.FloatTensor(X)\n","        y_tensor = torch.FloatTensor(y)\n","        for epoch in range(self.num_epochs):\n","            output = self.model(X_tensor)\n","            lossvalue = self.loss(output, y_tensor)\n","            self.optimizer.zero_grad()\n","            lossvalue.backward()\n","            self.optimizer.step()\n","        return self\n","\n","    def predict(self, X):\n","        self.model.eval()\n","        X_tensor = torch.FloatTensor(X)\n","        with torch.no_grad():\n","            outputs = self.model(X_tensor)\n","        return outputs.numpy()\n","\n","    def predict_proba(self, X):\n","        pass\n"],"metadata":{"id":"KbS4YPD1R2SH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","!pip install shap\n","import shap\n","\n","math_df = df[df['Subject'] == 'MATH'].copy()\n","\n","# print(math_df)\n","\n","def convert_yearterm(yearterm):\n","    year, term = yearterm.split('-')\n","    year = int(year) - 2010\n","    return year\n","\n","letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']\n","\n","for grade, gpa in grade_to_gpa.items():\n","    if grade in math_df.columns:\n","        math_df[grade] = math_df[grade] * gpa\n","\n","math_df.loc[:, 'Year'] = math_df['YearTerm'].apply(convert_yearterm)\n","threshold = 0.30\n","math_df['Total Graded'] = math_df[letter_grades].sum(axis=1)\n","math_df['Percent A/A+'] = (math_df['A'] + math_df['A+']) / math_df['Total Graded']\n","math_df.loc[:, 'Is Easy'] = (math_df['Percent A/A+'] >= threshold).astype(int)\n","\n","letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F', 'W']\n","features = math_df[['Year', 'Number'] + letter_grades + ['Sched Type']]\n","target = math_df['Is Easy']\n","\n","numerical_features = ['Year', 'Number'] + letter_grades\n","categorical_features = ['Sched Type']\n","\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n","\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', MinMaxScaler(), numerical_features),\n","        ('cat', OneHotEncoder(), categorical_features)\n","    ])\n","\n","X_train_transformed = preprocessor.fit_transform(X_train)\n","X_test_transformed = preprocessor.transform(X_test)\n","\n","X_train_tensor = torch.FloatTensor(X_train_transformed)\n","X_test_tensor = torch.FloatTensor(X_test_transformed)\n","y_train_tensor = torch.FloatTensor(y_train.values).view(-1, 1)\n","y_test_tensor = torch.FloatTensor(y_test.values).view(-1, 1)\n","\n","\n","\n","input_dim = X_train_tensor.shape[1]\n","model = Net(input_dim)\n","\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\n","loss_function = nn.MSELoss()\n","\n","for epoch in range(1000):\n","    output = model(X_train_tensor)\n","    loss = loss_function(output, y_train_tensor)\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n","\n","\n","explainer = shap.GradientExplainer(model, X_train_tensor)\n","shap_values = explainer.shap_values(X_test_tensor)\n","\n","average_shap_values = np.abs(shap_values).mean(axis=0)\n","feature_names = preprocessor.get_feature_names_out()\n","\n","average_shap_values_dict = dict(zip(feature_names, average_shap_values))\n","\n","average_shap_values_dict"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p6N1iPKgRq_K","executionInfo":{"status":"ok","timestamp":1702243708929,"user_tz":360,"elapsed":59688,"user":{"displayName":"Yue Su","userId":"08973589852710761677"}},"outputId":"06cd6720-654a-47ef-997b-71ace91c1b8b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting shap\n","  Downloading shap-0.44.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (533 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m533.5/533.5 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from shap) (1.23.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from shap) (1.11.4)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from shap) (1.2.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from shap) (1.5.3)\n","Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/dist-packages (from shap) (4.66.1)\n","Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/dist-packages (from shap) (23.2)\n","Collecting slicer==0.0.7 (from shap)\n","  Downloading slicer-0.0.7-py3-none-any.whl (14 kB)\n","Requirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from shap) (0.58.1)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from shap) (2.2.1)\n","Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->shap) (0.41.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2023.3.post1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (3.2.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->shap) (1.16.0)\n","Installing collected packages: slicer, shap\n","Successfully installed shap-0.44.0 slicer-0.0.7\n"]},{"output_type":"execute_result","data":{"text/plain":["{'num__Year': 0.06945737642147456,\n"," 'num__Number': 0.0581776052241969,\n"," 'num__A+': 0.018954649247338428,\n"," 'num__A': 0.017131477366243306,\n"," 'num__A-': 0.010524207988213458,\n"," 'num__B+': 0.01092327365376748,\n"," 'num__B': 0.008017947687713656,\n"," 'num__B-': 0.04756094363862314,\n"," 'num__C+': 0.028796784121452663,\n"," 'num__C': 0.013676663000563628,\n"," 'num__C-': 0.021528656126607724,\n"," 'num__D+': 0.024589424071354057,\n"," 'num__D': 0.003773978330356776,\n"," 'num__D-': 0.013380509581824079,\n"," 'num__F': 0.0,\n"," 'num__W': 0.013169347062461876,\n"," 'cat__Sched Type_DIS': 0.0016903131776162834,\n"," 'cat__Sched Type_LAB': 0.00018813391776267456,\n"," 'cat__Sched Type_LBD': 0.003327926616476524,\n"," 'cat__Sched Type_LCD': 0.021670556870521992,\n"," 'cat__Sched Type_LEC': 0.002332819983753746,\n"," 'cat__Sched Type_OD': 6.65456687900963e-05,\n"," 'cat__Sched Type_OLC': 0.007799813690684685,\n"," 'cat__Sched Type_ONL': 0.001983163728869718,\n"," 'cat__Sched Type_nan': 0.024017210785888896}"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# import pandas as pd\n","# import numpy as np\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.linear_model import LogisticRegression\n","# from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n","# from sklearn.compose import ColumnTransformer\n","# from sklearn.pipeline import Pipeline\n","# !pip install shap\n","# import shap\n","\n","# math_df = df[df['Subject'] == 'MATH'].copy()\n","\n","# # print(math_df)\n","\n","# def convert_yearterm(yearterm):\n","#     year, term = yearterm.split('-')\n","#     year = int(year) - 2010\n","#     return year\n","\n","# letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']\n","\n","# for grade, gpa in grade_to_gpa.items():\n","#     if grade in math_df.columns:\n","#         math_df[grade] = math_df[grade] * gpa\n","\n","# math_df.loc[:, 'Year'] = math_df['YearTerm'].apply(convert_yearterm)\n","# threshold = 0.30\n","# math_df['Total Graded'] = math_df[letter_grades].sum(axis=1)\n","# math_df['Percent A/A+'] = (math_df['A'] + math_df['A+']) / math_df['Total Graded']\n","# math_df.loc[:, 'Is Easy'] = (math_df['Percent A/A+'] >= threshold).astype(int)\n","\n","# letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F', 'W']\n","# features = math_df[['Year', 'Number'] + letter_grades + ['Sched Type']]\n","# target = math_df['Is Easy']\n","\n","# numerical_features = ['Year', 'Number'] + letter_grades\n","# categorical_features = ['Sched Type']\n","\n","# preprocessor = ColumnTransformer(\n","#     transformers=[\n","#         ('num', MinMaxScaler(), numerical_features),\n","#         ('cat', OneHotEncoder(), categorical_features)\n","#     ])\n","\n","# pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n","#                            ('classifier', LogisticRegression())])\n","\n","# X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n","# pipeline.fit(X_train, y_train)\n","\n","# X_test_transformed = preprocessor.transform(X_test)\n","# explainer = shap.Explainer(pipeline.named_steps['classifier'], X_test_transformed)\n","# shap_values = explainer(X_test_transformed)\n","\n","# average_shap_values = np.abs(shap_values.values).mean(axis=0)\n","# feature_names = X_test.columns\n","# average_shap_values_dict = dict(zip(feature_names, average_shap_values))\n","\n","# average_shap_values_dict"],"metadata":{"id":"g80fZ9WLoozr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["From the analysis above, we notice that 'Number' and 'Year' are the most importance and second-most important features, respectively. We also notice that all the lecture types (e.g. 'Sched Type_DIS', 'Sched Type_LAB', etc.) have significantly low feature importance than the others."],"metadata":{"id":"j_BICX-Ean2L"}},{"cell_type":"markdown","source":["***Please check the text block below!Now the year is not a feature with high importance***"],"metadata":{"id":"H-g3nd3elTLj"}},{"cell_type":"markdown","source":["\n","1 The effect of Year on prediction\n","\tThe average GPA increased from 2010 to 2022. Many factors might affect this.\n","\n","1.1 Professors gain practical experience from the past courses. They improve their teaching skills in a way that helps students have a better understanding of the course.\n","\n","1.2 Advances in teaching methods and technology may positively impact student learning outcomes. Interactive and engaging teaching methods, as well as the integration of technology, could contribute to better understanding of course material and improved performance.\n","\n","1.3 Improved access to educational resources, including libraries, online databases, and academic support services, can enhance students' ability to excel in their studies, potentially leading to higher GPAs.\n","\n","1.4 GPA Inflation: Higher grades are awarded for the same level of performance over time, contributing to the increase in average GPA. This may occur due to changing grading standards, pressure to maintain high retention rates, or a desire to boost students' competitiveness in the job market or graduate school admissions.\n","\n","1.5 UIUC implements initiatives aimed at improving student success, retention, and graduation rates such as Student success center at illinois. Support services, tutoring programs, and mentorship opportunities can help students perform better academically, leading to higher average GPAs.\n","\n","2 The effect of Course Number on Prediction\n","\tThe average GPA increases as course number increases. Here are some possible reasons why this happens:\n","\t1. Increased Specialization: In many academic systems, courses at higher numbers are often more specialized and tailored to a student's chosen major or field of study. As students progress through their academic journey, they may have a better understanding of their interests and strengths, leading to improved performance in courses aligned with their chosen path. Also, with each passing course, students accumulate a broader set of skills and knowledge. As they build on their foundational understanding, they may find subsequent courses more manageable and perform better academically.\n","\n","2.1 Motivation and Interest: As students progress in their academic journey, they may have the opportunity to choose courses that align more closely with their interests. This increased alignment can boost motivation, engagement, and overall performance.\n","\n","2.2 Selective Enrollment: Higher-level courses may have prerequisites, resulting in a more selective enrollment process. This could lead to a cohort of students who are more committed, academically inclined, and better prepared for the challenges of advanced coursework, contributing to higher average GPAs.\n","\n","2.3 Smaller Class Sizes: Advanced courses often have smaller class sizes,\n","allowing for more personalized attention from instructors. This can facilitate better understanding of the material, increased participation, and more targeted feedback, all of which can positively impact student performance.\n"],"metadata":{"id":"-eMn5LADnUFg"}}]}